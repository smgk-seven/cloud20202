@HystrixCommand(fallbackMethod = "paymentTimeOutHandle", commandProperties = {
            //在这里设置了超时响应为3秒
            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "2000")
    })

这种方法在服务端和客户端都适用，用在service 服务类层次上，针对 独立的方法来使用
fallbackMethod --》 如果方法出了异常就会找到这个参数执行这个方法，注意主方法的
方法参数会带到次方法中


/*
        ********           服务骗熔断                  **
        *
        * 服务降级--》进而熔断--》慢慢恢复调用链路
     */
    @HystrixCommand(
            fallbackMethod = "paymentCircuitBreakerFalback", commandProperties = {
            @HystrixProperty(name = "circuitBreaker.enabled", value = "true"),// 是否开启断路器
            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),// 请求次数
            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "10000"),// 时间窗口期/时间范文
            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "20")// 失败率达到多少后跳闸
    }
    )